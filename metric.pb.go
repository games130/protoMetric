// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metric.proto

package metric

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// HEP represents HEP packet
type Event struct {
	Version     uint32 `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Protocol    uint32 `protobuf:"varint,2,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	SrcIP       string `protobuf:"bytes,3,opt,name=SrcIP,proto3" json:"SrcIP,omitempty"`
	DstIP       string `protobuf:"bytes,4,opt,name=DstIP,proto3" json:"DstIP,omitempty"`
	SrcPort     uint32 `protobuf:"varint,5,opt,name=SrcPort,proto3" json:"SrcPort,omitempty"`
	DstPort     uint32 `protobuf:"varint,6,opt,name=DstPort,proto3" json:"DstPort,omitempty"`
	Tsec        uint32 `protobuf:"varint,7,opt,name=Tsec,proto3" json:"Tsec,omitempty"`
	Tmsec       uint32 `protobuf:"varint,8,opt,name=Tmsec,proto3" json:"Tmsec,omitempty"`
	ProtoType   uint32 `protobuf:"varint,9,opt,name=ProtoType,proto3" json:"ProtoType,omitempty"`
	NodeID      uint32 `protobuf:"varint,10,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	NodePW      string `protobuf:"bytes,11,opt,name=NodePW,proto3" json:"NodePW,omitempty"`
	Payload     string `protobuf:"bytes,12,opt,name=Payload,proto3" json:"Payload,omitempty"`
	CID         string `protobuf:"bytes,13,opt,name=CID,proto3" json:"CID,omitempty"`
	Vlan        uint32 `protobuf:"varint,14,opt,name=Vlan,proto3" json:"Vlan,omitempty"`
	CseqMethod  string `protobuf:"bytes,15,opt,name=CseqMethod,proto3" json:"CseqMethod,omitempty"`
	FirstMethod string `protobuf:"bytes,16,opt,name=FirstMethod,proto3" json:"FirstMethod,omitempty"`
	CallID      string `protobuf:"bytes,17,opt,name=CallID,proto3" json:"CallID,omitempty"`
	FromUser    string `protobuf:"bytes,18,opt,name=FromUser,proto3" json:"FromUser,omitempty"`
	Expires     string `protobuf:"bytes,19,opt,name=Expires,proto3" json:"Expires,omitempty"`
	ReasonVal   string `protobuf:"bytes,20,opt,name=ReasonVal,proto3" json:"ReasonVal,omitempty"`
	RTPStatVal  string `protobuf:"bytes,21,opt,name=RTPStatVal,proto3" json:"RTPStatVal,omitempty"`
	ToUser      string `protobuf:"bytes,22,opt,name=ToUser,proto3" json:"ToUser,omitempty"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_da41641f55bff5df, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Event) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *Event) GetSrcIP() string {
	if m != nil {
		return m.SrcIP
	}
	return ""
}

func (m *Event) GetDstIP() string {
	if m != nil {
		return m.DstIP
	}
	return ""
}

func (m *Event) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Event) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *Event) GetTsec() uint32 {
	if m != nil {
		return m.Tsec
	}
	return 0
}

func (m *Event) GetTmsec() uint32 {
	if m != nil {
		return m.Tmsec
	}
	return 0
}

func (m *Event) GetProtoType() uint32 {
	if m != nil {
		return m.ProtoType
	}
	return 0
}

func (m *Event) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *Event) GetNodePW() string {
	if m != nil {
		return m.NodePW
	}
	return ""
}

func (m *Event) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Event) GetCID() string {
	if m != nil {
		return m.CID
	}
	return ""
}

func (m *Event) GetVlan() uint32 {
	if m != nil {
		return m.Vlan
	}
	return 0
}

func (m *Event) GetCseqMethod() string {
	if m != nil {
		return m.CseqMethod
	}
	return ""
}

func (m *Event) GetFirstMethod() string {
	if m != nil {
		return m.FirstMethod
	}
	return ""
}

func (m *Event) GetCallID() string {
	if m != nil {
		return m.CallID
	}
	return ""
}

func (m *Event) GetFromUser() string {
	if m != nil {
		return m.FromUser
	}
	return ""
}

func (m *Event) GetExpires() string {
	if m != nil {
		return m.Expires
	}
	return ""
}

func (m *Event) GetReasonVal() string {
	if m != nil {
		return m.ReasonVal
	}
	return ""
}

func (m *Event) GetRTPStatVal() string {
	if m != nil {
		return m.RTPStatVal
	}
	return ""
}

func (m *Event) GetToUser() string {
	if m != nil {
		return m.ToUser
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
}

func init() { proto.RegisterFile("metric.proto", fileDescriptor_da41641f55bff5df) }

var fileDescriptor_da41641f55bff5df = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x34, 0x49, 0x9b, 0x6d, 0x0b, 0x65, 0x29, 0xd5, 0xa8, 0x42, 0xab, 0x88, 0x53,
	0x2f, 0xb4, 0x48, 0xbc, 0x01, 0x71, 0x2b, 0xf9, 0x00, 0xb2, 0x1c, 0x13, 0xce, 0x8e, 0xb3, 0xa4,
	0x96, 0x6c, 0x6f, 0xd8, 0xdd, 0x22, 0x7a, 0xe3, 0x11, 0x78, 0x0c, 0xde, 0x81, 0x0b, 0x47, 0x8e,
	0x3d, 0xe6, 0x48, 0x9c, 0x17, 0xe0, 0xc8, 0x11, 0xcd, 0xac, 0xf3, 0xe7, 0x36, 0xbf, 0xef, 0x1b,
	0x79, 0x7e, 0xb2, 0xcd, 0x8f, 0x2a, 0xe5, 0x4c, 0x91, 0x5f, 0xce, 0x8d, 0x76, 0xfa, 0xfc, 0xd5,
	0xac, 0x70, 0xb7, 0x77, 0x93, 0xcb, 0x5c, 0x57, 0x57, 0x33, 0x3d, 0xd3, 0x57, 0x14, 0x4f, 0xee,
	0x3e, 0x11, 0x11, 0xd0, 0xe4, 0xd7, 0x5f, 0xfe, 0xec, 0xf0, 0xee, 0xf5, 0x17, 0x55, 0x3b, 0x01,
	0x7c, 0x7f, 0xac, 0x8c, 0x2d, 0x74, 0x0d, 0x6c, 0xc0, 0x2e, 0x8e, 0x93, 0x35, 0x8a, 0x73, 0x7e,
	0x10, 0xe3, 0x72, 0xae, 0x4b, 0x78, 0x44, 0xd5, 0x86, 0xc5, 0x29, 0xef, 0x8e, 0x4c, 0x1e, 0xc5,
	0xb0, 0x37, 0x60, 0x17, 0xfd, 0xc4, 0x03, 0xa6, 0xa1, 0x75, 0x51, 0x0c, 0x1d, 0x9f, 0x12, 0xe0,
	0x85, 0x91, 0xc9, 0x63, 0x6d, 0x1c, 0x74, 0xfd, 0x85, 0x16, 0xb1, 0x09, 0xad, 0xa3, 0xa6, 0xe7,
	0x9b, 0x16, 0x85, 0xe0, 0x9d, 0xd4, 0xaa, 0x1c, 0xf6, 0x29, 0xa6, 0x19, 0x9f, 0x9e, 0x56, 0x18,
	0x1e, 0x50, 0xe8, 0x41, 0xbc, 0xe0, 0x7d, 0xb2, 0x4a, 0xef, 0xe7, 0x0a, 0xfa, 0xd4, 0x6c, 0x03,
	0x71, 0xc6, 0x7b, 0xef, 0xf5, 0x54, 0x45, 0x21, 0x70, 0xaa, 0x5a, 0x5a, 0xe7, 0xf1, 0x47, 0x38,
	0x24, 0xd5, 0x96, 0xd0, 0x28, 0xce, 0xee, 0x4b, 0x9d, 0x4d, 0xe1, 0x88, 0x8a, 0x35, 0x8a, 0x13,
	0xbe, 0x37, 0x8c, 0x42, 0x38, 0xa6, 0x14, 0x47, 0x74, 0x1c, 0x97, 0x59, 0x0d, 0x8f, 0xbd, 0x23,
	0xce, 0x42, 0x72, 0x3e, 0xb4, 0xea, 0xf3, 0x3b, 0xe5, 0x6e, 0xf5, 0x14, 0x9e, 0xd0, 0xf2, 0x4e,
	0x22, 0x06, 0xfc, 0xf0, 0xa6, 0x30, 0xd6, 0xb5, 0x0b, 0x27, 0xb4, 0xb0, 0x1b, 0xa1, 0xd9, 0x30,
	0x2b, 0xcb, 0x28, 0x84, 0xa7, 0xde, 0xcc, 0x13, 0x7e, 0x8d, 0x1b, 0xa3, 0xab, 0x0f, 0x56, 0x19,
	0x10, 0xd4, 0x6c, 0x18, 0xad, 0xaf, 0xbf, 0xce, 0x0b, 0xa3, 0x2c, 0x3c, 0xf3, 0xd6, 0x2d, 0xe2,
	0xdb, 0x49, 0x54, 0x66, 0x75, 0x3d, 0xce, 0x4a, 0x38, 0xa5, 0x6e, 0x1b, 0xa0, 0x6d, 0x92, 0xc6,
	0x23, 0x97, 0x39, 0xac, 0x9f, 0x7b, 0xdb, 0x6d, 0x82, 0x2e, 0xa9, 0xa6, 0x8b, 0x67, 0xde, 0xc5,
	0xd3, 0xdb, 0xd7, 0x8b, 0xa5, 0x0c, 0xfe, 0x2e, 0x25, 0xfb, 0xb7, 0x94, 0xec, 0x5b, 0x23, 0xd9,
	0x8f, 0x46, 0xb2, 0x5f, 0x8d, 0x64, 0xbf, 0x1b, 0xc9, 0x1e, 0x1a, 0xc9, 0xfe, 0x34, 0x92, 0x7d,
	0x5f, 0xc9, 0xe0, 0x61, 0x25, 0x83, 0xc5, 0x4a, 0x06, 0x93, 0x1e, 0xfd, 0x76, 0x6f, 0xfe, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x4b, 0x35, 0x4a, 0x52, 0xb5, 0x02, 0x00, 0x00,
}

func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.SrcIP != that1.SrcIP {
		return false
	}
	if this.DstIP != that1.DstIP {
		return false
	}
	if this.SrcPort != that1.SrcPort {
		return false
	}
	if this.DstPort != that1.DstPort {
		return false
	}
	if this.Tsec != that1.Tsec {
		return false
	}
	if this.Tmsec != that1.Tmsec {
		return false
	}
	if this.ProtoType != that1.ProtoType {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.NodePW != that1.NodePW {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	if this.CID != that1.CID {
		return false
	}
	if this.Vlan != that1.Vlan {
		return false
	}
	if this.CseqMethod != that1.CseqMethod {
		return false
	}
	if this.FirstMethod != that1.FirstMethod {
		return false
	}
	if this.CallID != that1.CallID {
		return false
	}
	if this.FromUser != that1.FromUser {
		return false
	}
	if this.Expires != that1.Expires {
		return false
	}
	if this.ReasonVal != that1.ReasonVal {
		return false
	}
	if this.RTPStatVal != that1.RTPStatVal {
		return false
	}
	if this.ToUser != that1.ToUser {
		return false
	}
	return true
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&metric.Event{")
	s = append(s, "Version: "+fmt.Sprintf("%#v", this.Version)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "SrcIP: "+fmt.Sprintf("%#v", this.SrcIP)+",\n")
	s = append(s, "DstIP: "+fmt.Sprintf("%#v", this.DstIP)+",\n")
	s = append(s, "SrcPort: "+fmt.Sprintf("%#v", this.SrcPort)+",\n")
	s = append(s, "DstPort: "+fmt.Sprintf("%#v", this.DstPort)+",\n")
	s = append(s, "Tsec: "+fmt.Sprintf("%#v", this.Tsec)+",\n")
	s = append(s, "Tmsec: "+fmt.Sprintf("%#v", this.Tmsec)+",\n")
	s = append(s, "ProtoType: "+fmt.Sprintf("%#v", this.ProtoType)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "NodePW: "+fmt.Sprintf("%#v", this.NodePW)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "CID: "+fmt.Sprintf("%#v", this.CID)+",\n")
	s = append(s, "Vlan: "+fmt.Sprintf("%#v", this.Vlan)+",\n")
	s = append(s, "CseqMethod: "+fmt.Sprintf("%#v", this.CseqMethod)+",\n")
	s = append(s, "FirstMethod: "+fmt.Sprintf("%#v", this.FirstMethod)+",\n")
	s = append(s, "CallID: "+fmt.Sprintf("%#v", this.CallID)+",\n")
	s = append(s, "FromUser: "+fmt.Sprintf("%#v", this.FromUser)+",\n")
	s = append(s, "Expires: "+fmt.Sprintf("%#v", this.Expires)+",\n")
	s = append(s, "ReasonVal: "+fmt.Sprintf("%#v", this.ReasonVal)+",\n")
	s = append(s, "RTPStatVal: "+fmt.Sprintf("%#v", this.RTPStatVal)+",\n")
	s = append(s, "ToUser: "+fmt.Sprintf("%#v", this.ToUser)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMetric(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.Version))
	}
	if m.Protocol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.Protocol))
	}
	if len(m.SrcIP) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.SrcIP)))
		i += copy(dAtA[i:], m.SrcIP)
	}
	if len(m.DstIP) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.DstIP)))
		i += copy(dAtA[i:], m.DstIP)
	}
	if m.SrcPort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.SrcPort))
	}
	if m.DstPort != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.DstPort))
	}
	if m.Tsec != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.Tsec))
	}
	if m.Tmsec != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.Tmsec))
	}
	if m.ProtoType != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.ProtoType))
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.NodeID))
	}
	if len(m.NodePW) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.NodePW)))
		i += copy(dAtA[i:], m.NodePW)
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.CID) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.CID)))
		i += copy(dAtA[i:], m.CID)
	}
	if m.Vlan != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMetric(dAtA, i, uint64(m.Vlan))
	}
	if len(m.CseqMethod) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.CseqMethod)))
		i += copy(dAtA[i:], m.CseqMethod)
	}
	if len(m.FirstMethod) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.FirstMethod)))
		i += copy(dAtA[i:], m.FirstMethod)
	}
	if len(m.CallID) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.CallID)))
		i += copy(dAtA[i:], m.CallID)
	}
	if len(m.FromUser) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.FromUser)))
		i += copy(dAtA[i:], m.FromUser)
	}
	if len(m.Expires) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.Expires)))
		i += copy(dAtA[i:], m.Expires)
	}
	if len(m.ReasonVal) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.ReasonVal)))
		i += copy(dAtA[i:], m.ReasonVal)
	}
	if len(m.RTPStatVal) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.RTPStatVal)))
		i += copy(dAtA[i:], m.RTPStatVal)
	}
	if len(m.ToUser) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMetric(dAtA, i, uint64(len(m.ToUser)))
		i += copy(dAtA[i:], m.ToUser)
	}
	return i, nil
}

func encodeVarintMetric(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedEvent(r randyMetric, easy bool) *Event {
	this := &Event{}
	this.Version = uint32(r.Uint32())
	this.Protocol = uint32(r.Uint32())
	this.SrcIP = string(randStringMetric(r))
	this.DstIP = string(randStringMetric(r))
	this.SrcPort = uint32(r.Uint32())
	this.DstPort = uint32(r.Uint32())
	this.Tsec = uint32(r.Uint32())
	this.Tmsec = uint32(r.Uint32())
	this.ProtoType = uint32(r.Uint32())
	this.NodeID = uint32(r.Uint32())
	this.NodePW = string(randStringMetric(r))
	this.Payload = string(randStringMetric(r))
	this.CID = string(randStringMetric(r))
	this.Vlan = uint32(r.Uint32())
	this.CseqMethod = string(randStringMetric(r))
	this.FirstMethod = string(randStringMetric(r))
	this.CallID = string(randStringMetric(r))
	this.FromUser = string(randStringMetric(r))
	this.Expires = string(randStringMetric(r))
	this.ReasonVal = string(randStringMetric(r))
	this.RTPStatVal = string(randStringMetric(r))
	this.ToUser = string(randStringMetric(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMetric interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMetric(r randyMetric) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMetric(r randyMetric) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneMetric(r)
	}
	return string(tmps)
}
func randUnrecognizedMetric(r randyMetric, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMetric(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMetric(dAtA []byte, r randyMetric, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMetric(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateMetric(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateMetric(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMetric(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMetric(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMetric(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMetric(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMetric(uint64(m.Version))
	}
	if m.Protocol != 0 {
		n += 1 + sovMetric(uint64(m.Protocol))
	}
	l = len(m.SrcIP)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.DstIP)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.SrcPort != 0 {
		n += 1 + sovMetric(uint64(m.SrcPort))
	}
	if m.DstPort != 0 {
		n += 1 + sovMetric(uint64(m.DstPort))
	}
	if m.Tsec != 0 {
		n += 1 + sovMetric(uint64(m.Tsec))
	}
	if m.Tmsec != 0 {
		n += 1 + sovMetric(uint64(m.Tmsec))
	}
	if m.ProtoType != 0 {
		n += 1 + sovMetric(uint64(m.ProtoType))
	}
	if m.NodeID != 0 {
		n += 1 + sovMetric(uint64(m.NodeID))
	}
	l = len(m.NodePW)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.CID)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	if m.Vlan != 0 {
		n += 1 + sovMetric(uint64(m.Vlan))
	}
	l = len(m.CseqMethod)
	if l > 0 {
		n += 1 + l + sovMetric(uint64(l))
	}
	l = len(m.FirstMethod)
	if l > 0 {
		n += 2 + l + sovMetric(uint64(l))
	}
	l = len(m.CallID)
	if l > 0 {
		n += 2 + l + sovMetric(uint64(l))
	}
	l = len(m.FromUser)
	if l > 0 {
		n += 2 + l + sovMetric(uint64(l))
	}
	l = len(m.Expires)
	if l > 0 {
		n += 2 + l + sovMetric(uint64(l))
	}
	l = len(m.ReasonVal)
	if l > 0 {
		n += 2 + l + sovMetric(uint64(l))
	}
	l = len(m.RTPStatVal)
	if l > 0 {
		n += 2 + l + sovMetric(uint64(l))
	}
	l = len(m.ToUser)
	if l > 0 {
		n += 2 + l + sovMetric(uint64(l))
	}
	return n
}

func sovMetric(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMetric(x uint64) (n int) {
	return sovMetric(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`SrcIP:` + fmt.Sprintf("%v", this.SrcIP) + `,`,
		`DstIP:` + fmt.Sprintf("%v", this.DstIP) + `,`,
		`SrcPort:` + fmt.Sprintf("%v", this.SrcPort) + `,`,
		`DstPort:` + fmt.Sprintf("%v", this.DstPort) + `,`,
		`Tsec:` + fmt.Sprintf("%v", this.Tsec) + `,`,
		`Tmsec:` + fmt.Sprintf("%v", this.Tmsec) + `,`,
		`ProtoType:` + fmt.Sprintf("%v", this.ProtoType) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`NodePW:` + fmt.Sprintf("%v", this.NodePW) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`CID:` + fmt.Sprintf("%v", this.CID) + `,`,
		`Vlan:` + fmt.Sprintf("%v", this.Vlan) + `,`,
		`CseqMethod:` + fmt.Sprintf("%v", this.CseqMethod) + `,`,
		`FirstMethod:` + fmt.Sprintf("%v", this.FirstMethod) + `,`,
		`CallID:` + fmt.Sprintf("%v", this.CallID) + `,`,
		`FromUser:` + fmt.Sprintf("%v", this.FromUser) + `,`,
		`Expires:` + fmt.Sprintf("%v", this.Expires) + `,`,
		`ReasonVal:` + fmt.Sprintf("%v", this.ReasonVal) + `,`,
		`RTPStatVal:` + fmt.Sprintf("%v", this.RTPStatVal) + `,`,
		`ToUser:` + fmt.Sprintf("%v", this.ToUser) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMetric(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			m.SrcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			m.DstPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tsec", wireType)
			}
			m.Tsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tsec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tmsec", wireType)
			}
			m.Tmsec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tmsec |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtoType", wireType)
			}
			m.ProtoType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtoType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodePW", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodePW = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vlan", wireType)
			}
			m.Vlan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vlan |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CseqMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CseqMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expires = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReasonVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReasonVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RTPStatVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RTPStatVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetric
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMetric
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetric(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMetric
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetric(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetric
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetric
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMetric
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMetric
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetric
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetric(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMetric
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetric = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetric   = fmt.Errorf("proto: integer overflow")
)
